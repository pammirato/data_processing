
%initialize contants, paths and file names, etc. 
init;



%% USER OPTIONS

scene_name = 'SN208_den1'; %make this = 'all' to run all scenes
group_name = 'all';
model_number = '0';
use_custom_scenes = 0;%whether or not to run for the scenes in the custom list
custom_scenes_list = {};%populate this 

instance_name = 'all';%make this 'all' to do it for all labels, 'bigBIRD' to do bigBIRD stuff
use_custom_instances = 0;
custom_instances_list = {'chair5','chair6'};


recognition_system_name = 'ssd_bigBIRD';

show_figures = 0;
show_global_figures = 0;
save_figures = 1;

%% SET UP GLOBAL DATA STRUCTURES


%get the names of all the scenes 
d = dir(ROHIT_BASE_PATH);
d = d(3:end);
all_scenes = {d.name};


%determine which scenes are to be processed 
if(use_custom_scenes && ~isempty(custom_scenes_list))
  %if we are using the custom list of scenes
  all_scenes = custom_scenes_list;
elseif(~strcmp(scene_name, 'all'))
  %if not using custom, or all scenes, use the one specified
  all_scenes = {scene_name};
end




%% MAIN LOOP

for i=1:length(all_scenes)
 
  %% set scene specific data structures
  scene_name = all_scenes{i};
  scene_path =fullfile(ROHIT_BASE_PATH, scene_name);
  meta_path = fullfile(ROHIT_META_BASE_PATH, scene_name);

  %get all the instance labels in this scene
  all_instance_names = get_names_of_X_for_scene(scene_name, 'instance_labels');

  %decide which labels to process    
  if(use_custom_instances && ~isempty(custom_instances_list))
    all_instance_names = custom_instances_list;
  elseif(strcmp(instance_name,'bigBIRD'))
    temp = dir(fullfile(BIGBIRD_BASE_PATH));
    temp = temp(3:end);
    all_instance_names = {temp.name};
  elseif(strcmp(instance_name, 'all'))
    all_instance_names = all_instance_names;
  else
    all_instance_names = {instance_name};
  end
  %get all the image names in the scene
  image_names = get_names_of_X_for_scene(scene_name,'rgb_images'); 

  
  instance_images_map = containers.Map(all_instance_names, cell(1,length(all_instance_names)));


  %load image_structs for all images
  image_structs_file =  load(fullfile(meta_path,'reconstruction_results', group_name, ...
                                'colmap_results', model_number,IMAGE_STRUCTS_FILE));
  image_structs = image_structs_file.(IMAGE_STRUCTS);
  scale  = image_structs_file.scale;


  %get a list of all the image file names
  image_names = {image_structs.(IMAGE_NAME)};

  %make a map from image name to image_struct
  image_structs_map = containers.Map(image_names,...
                                 cell(1,length(image_names)));
  %populate the map
  for jl=1:length(image_names)
    image_structs_map(image_names{jl}) = image_structs(jl);
  end


  detections_map = containers.Map(image_names, cell(1,length(image_names)));

  for jl=1:length(image_names)
    image_name = image_names{jl};
    dets = load(fullfile(meta_path, 'recognition_results', recognition_system_name, ...
                           'bounding_boxes_by_image_instance', ...
                          strcat(image_name(1:10), '.mat')));

    detections_map(image_name) = dets; 
 end




  dists = -ones(length(image_names)^2,1);
  score_diffs = -ones(length(image_names)^2,length(all_instance_names));
  all_scores = -ones(length(image_names),length(all_instance_names));


  for jl=1:length(image_names)

    image_name_jl = image_names{jl};
    image_struct_jl = image_structs_map(image_name_jl);
    cam_pos_jl =  image_struct_jl.world_pos*scale;
    %dets_jl = detections_map(image_name_jl);
    dets_jl = cell2mat(struct2cell(detections_map(image_name_jl)));
    %det_jl = dets_jl.(instance_name);
    %score_jl = det_jl(5);
    scores_jl = dets_jl(:,5);

    all_scores(jl,:) = scores_jl;

    for kl = 1:length(image_names)
      image_name_kl = image_names{kl};
      image_struct_kl = image_structs_map(image_name_kl);
      cam_pos_kl =  image_struct_kl.world_pos*scale;
      %dets_kl = detections_map(image_name_kl);
      dets_kl = cell2mat(struct2cell(detections_map(image_name_kl)));
      %det_kl = dets_kl.(instance_name);
      %score_kl = det_kl(5); 
      scores_kl = dets_kl(:,5);


      dist = pdist2(cam_pos_jl', cam_pos_kl');
      %score_diff = abs(score_jl - score_kl);
      score_diff = abs(scores_jl - scores_kl);

      index = (jl-1)*length(image_names) + kl;
      dists(index)  =dist;
      score_diffs(index,:) = score_diff; 
    end%for kl

   

  end%for jl  

  
  
  for jl=1:length
  
  bin_size = 100;
  max_dist = max(dists);
  num_bins = ceil(max_dist/bin_size);
  

  for jl=1:num_bins
    dist = jl*bin_size;
    good_inds = find( (dists < dist) & (dists > (dist-bin_size))); 
    avg_score_diff_per_dist(jl) = mean(score_diffs(good_inds,2));  
  end

  figure; plot(1:length(avg_score_diff_per_dist), avg_score_diff_per_dist, 'r-')

end%for each scene


